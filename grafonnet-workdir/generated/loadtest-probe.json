{
  "description": "Dashboard visualizes Konflux clusters loadtest probe results. Related Horreum test is https://horreum.corp.redhat.com/test/372 with filter by label `.repo_type = nodejs-devfile-sample`.",
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "insertNulls": 5400000
          },
          "min": 0,
          "unit": "s"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 1,
      "maxPerRow": 6,
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_KPI_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_KPI_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_KPI_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_KPI_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_KPI_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_KPI_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        }
      ],
      "title": "Mean duration on ${member_cluster}",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 0.10000000000000001
              }
            ]
          },
          "unit": "percentunit"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 2,
      "maxPerRow": 6,
      "options": {
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "values": false
        }
      },
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_KPI_errors')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_KPI_errors')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_KPI_errors')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_KPI_errors')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_KPI_errors')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_KPI_errors' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        }
      ],
      "title": "Failure rate on ${member_cluster}",
      "transformations": [],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "filterable": true
          },
          "min": 0,
          "unit": "string"
        }
      },
      "gridPos": {
        "h": 10,
        "w": 24
      },
      "id": 3,
      "maxPerRow": 6,
      "options": {
        "footer": {
          "enablePagination": true
        }
      },
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    label_values->>'__results_errors_error_reasons_simple' AS \"Error reasons\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\nORDER BY\n    start DESC;\n"
        }
      ],
      "title": "Error reasons detail on ${member_cluster}",
      "transformations": [],
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "min": 0,
          "noValue": "no error detected",
          "unit": "none"
        }
      },
      "gridPos": {
        "h": 10,
        "w": 24
      },
      "id": 4,
      "maxPerRow": 6,
      "options": {
        "displayLabels": [
          "value"
        ],
        "reduceOptions": {
          "values": true
        }
      },
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "table",
          "rawSql": "SELECT\n    COALESCE(\n        CASE\n            WHEN label_values ? '__results_errors_error_reasons_simple' THEN\n                regexp_replace(label_values->>'__results_errors_error_reasons_simple', '[0-9]+x ', '', 'g')\n            ELSE\n                NULL\n        END,\n        '') AS \"Error\",\n    COUNT(*) AS \"Count\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\nGROUP BY\n    \"Error\"\nORDER BY\n    \"Error\" ASC;\n"
        }
      ],
      "title": "Error reasons overall on ${member_cluster}",
      "transformations": [],
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "insertNulls": 5400000
          },
          "min": 0,
          "unit": "s"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 5,
      "maxPerRow": 6,
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_HandleUser_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_HandleUser_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_HandleUser_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_HandleUser_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_HandleUser_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_HandleUser_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_createApplication_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_createApplication_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_createApplication_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_createApplication_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_createApplication_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_createApplication_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_createComponent_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_createComponent_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_createComponent_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_createComponent_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_createComponent_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_createComponent_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_createIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_createIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_createIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_createIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_createIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_createIntegrationTestScenario_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateApplication_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateApplication_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateApplication_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateApplication_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateApplication_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateApplication_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateIntegrationTestScenario_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateIntegrationTestScenario_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validatePipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validatePipelineRunCondition_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validatePipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validatePipelineRunCreation_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunSignature_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunSignature_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validatePipelineRunSignature_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validatePipelineRunSignature_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validatePipelineRunSignature_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validatePipelineRunSignature_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateSnapshotCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateSnapshotCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateSnapshotCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateSnapshotCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateSnapshotCreation_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateSnapshotCreation_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateTestPipelineRunCondition_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateTestPipelineRunCondition_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateTestPipelineRunCreation_pass_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateTestPipelineRunCreation_pass_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        }
      ],
      "title": "Duration by test phase on ${member_cluster}",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "insertNulls": 5400000
          },
          "min": 0,
          "unit": "none"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 6,
      "maxPerRow": 6,
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_HandleUser_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_HandleUser_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_HandleUser_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_HandleUser_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_HandleUser_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_HandleUser_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_createApplication_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_createApplication_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_createApplication_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_createApplication_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_createApplication_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_createApplication_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_createComponent_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_createComponent_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_createComponent_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_createComponent_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_createComponent_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_createComponent_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_createIntegrationTestScenario_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_createIntegrationTestScenario_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_createIntegrationTestScenario_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_createIntegrationTestScenario_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_createIntegrationTestScenario_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_createIntegrationTestScenario_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateApplication_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateApplication_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateApplication_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateApplication_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateApplication_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateApplication_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateIntegrationTestScenario_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateIntegrationTestScenario_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateIntegrationTestScenario_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateIntegrationTestScenario_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateIntegrationTestScenario_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateIntegrationTestScenario_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCondition_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCondition_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCondition_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCondition_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validatePipelineRunCondition_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validatePipelineRunCondition_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validatePipelineRunCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validatePipelineRunCreation_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validatePipelineRunCreation_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunSignature_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validatePipelineRunSignature_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validatePipelineRunSignature_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validatePipelineRunSignature_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validatePipelineRunSignature_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validatePipelineRunSignature_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateSnapshotCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateSnapshotCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateSnapshotCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateSnapshotCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateSnapshotCreation_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateSnapshotCreation_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCondition_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCondition_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCondition_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCondition_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateTestPipelineRunCondition_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateTestPipelineRunCondition_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_measurements_validateTestPipelineRunCreation_error_rate')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_measurements_validateTestPipelineRunCreation_error_rate')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_measurements_validateTestPipelineRunCreation_error_rate' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    \nORDER BY\n    start;\n"
        }
      ],
      "title": "Error rate by test phase on ${member_cluster}",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "insertNulls": 5400000
          },
          "min": 0,
          "unit": "s"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 7,
      "maxPerRow": 6,
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_apply_tags__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_buildah__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_build_image_index__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clair_scan__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clamav_scan__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_git_clone__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_init__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_show_sbom__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_summary__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__test_test_output__passed_duration_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        }
      ],
      "title": "Overall duration by task run on ${member_cluster}",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "insertNulls": 5400000
          },
          "min": 0,
          "unit": "s"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 8,
      "maxPerRow": 6,
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_apply_tags__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_buildah__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_buildah__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_build_image_index__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clair_scan__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clamav_scan__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_coverity_availability_check__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_deprecated_image_check__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_git_clone__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_init__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_init__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_push_dockerfile__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_rpms_signature_scan__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_shell_check__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_snyk_check__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_unicode_check__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_show_sbom__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_summary__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_summary__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_running_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__test_test_output__passed_running_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__test_test_output__passed_running_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        }
      ],
      "title": "Running duration by task run on ${member_cluster}",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "insertNulls": 5400000
          },
          "min": 0,
          "unit": "s"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 9,
      "maxPerRow": 6,
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_apply_tags__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_buildah__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_buildah__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_build_image_index__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clair_scan__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clamav_scan__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_coverity_availability_check__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_deprecated_image_check__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_git_clone__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_init__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_init__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_push_dockerfile__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_rpms_signature_scan__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_shell_check__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_snyk_check__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_unicode_check__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_show_sbom__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_summary__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_summary__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_scheduled_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__test_test_output__passed_scheduled_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__test_test_output__passed_scheduled_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        }
      ],
      "title": "Scheduled duration by task run on ${member_cluster}",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "insertNulls": 5400000
          },
          "min": 0,
          "unit": "s"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 10,
      "maxPerRow": 6,
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_apply_tags__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_buildah__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_buildah__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_build_image_index__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clair_scan__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clamav_scan__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_coverity_availability_check__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_deprecated_image_check__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_git_clone__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_init__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_init__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_push_dockerfile__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_rpms_signature_scan__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_shell_check__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_snyk_check__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_unicode_check__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_show_sbom__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_summary__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_summary__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_idle_mean')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__test_test_output__passed_idle_mean')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__test_test_output__passed_idle_mean' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        }
      ],
      "title": "Idle duration by task run on ${member_cluster}",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "insertNulls": 5400000
          },
          "min": 0,
          "unit": "none"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24
      },
      "id": 11,
      "maxPerRow": 6,
      "pluginVersion": "v11.4.0",
      "repeat": "member_cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_apply_tags__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_apply_tags__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_buildah__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_buildah__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_build_image_index__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_build_image_index__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clair_scan__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clair_scan__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_clamav_scan__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_clamav_scan__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_coverity_availability_check__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_deprecated_image_check__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_ecosystem_cert_preflight_checks__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_git_clone__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_git_clone__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_init__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_init__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_push_dockerfile__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_rpms_signature_scan__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_shell_check__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_snyk_check__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_sast_unicode_check__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_show_sbom__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_show_sbom__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__build_summary__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__build_summary__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        },
        {
          "format": "time_series",
          "rawSql": "SELECT\n    EXTRACT(EPOCH FROM start) AS \"time\",\n    CASE\n        WHEN '${smoothing}' = '3 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 hours' PRECEDING)\n        WHEN '${smoothing}' = '12 hours' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '12 hours' PRECEDING)\n        WHEN '${smoothing}' = '1 day' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '1 day' PRECEDING)\n        WHEN '${smoothing}' = '3 days' THEN AVG((label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_samples')::DOUBLE PRECISION) OVER (ORDER BY start RANGE '3 days' PRECEDING)\n        ELSE (label_values->>'__results_durations_stats_taskruns__test_test_output__passed_duration_samples')::DOUBLE PRECISION\n    END AS \"value\",\n    '__results_durations_stats_taskruns__test_test_output__passed_duration_samples' as \"metric\"\nFROM\n    data\nWHERE\n    horreum_testid = 372\n    AND label_values->>'.metadata.env.MEMBER_CLUSTER' = '${member_cluster}'\n    AND ( label_values->>'.repo_type' = 'nodejs-devfile-sample' OR NOT (label_values ? '.repo_type') )\n    AND $__timeFilter(start)\n    AND label_values->>'.results.measurements.KPI.mean' != '-1'\nORDER BY\n    start;\n"
        }
      ],
      "title": "Count of task runs on ${member_cluster}",
      "transformations": [],
      "type": "timeseries"
    }
  ],
  "schemaVersion": 39,
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "grafana-postgresql-datasource",
          "value": "grafana-postgresql-datasource"
        },
        "description": "Description",
        "label": "Datasource",
        "name": "datasource",
        "query": "grafana-postgresql-datasource",
        "regex": ".*grafana-postgresql-datasource.*",
        "type": "datasource"
      },
      {
        "current": {
          "selected": false,
          "text": [
            "all"
          ],
          "value": [
            "all"
          ]
        },
        "description": "Description",
        "includeAll": true,
        "label": "Member cluster",
        "multi": true,
        "name": "member_cluster",
        "options": [
          {
            "selected": true,
            "text": "https://api.stone-prd-rh01.pg1f.p1.openshiftapps.com:6443/",
            "value": "https://api.stone-prd-rh01.pg1f.p1.openshiftapps.com:6443/"
          },
          {
            "selected": false,
            "text": "https://api.stone-stg-rh01.l2vh.p1.openshiftapps.com:6443/",
            "value": "https://api.stone-stg-rh01.l2vh.p1.openshiftapps.com:6443/"
          },
          {
            "selected": false,
            "text": "https://api.stone-prod-p02.hjvn.p1.openshiftapps.com:6443/",
            "value": "https://api.stone-prod-p02.hjvn.p1.openshiftapps.com:6443/"
          },
          {
            "selected": false,
            "text": "https://api.stone-stage-p01.hpmt.p1.openshiftapps.com:6443/",
            "value": "https://api.stone-stage-p01.hpmt.p1.openshiftapps.com:6443/"
          },
          {
            "selected": false,
            "text": "https://api.kflux-prd-rh02.0fk9.p1.openshiftapps.com:6443/",
            "value": "https://api.kflux-prd-rh02.0fk9.p1.openshiftapps.com:6443/"
          },
          {
            "selected": false,
            "text": "https://api.stone-prod-p01.wcfb.p1.openshiftapps.com:6443/",
            "value": "https://api.stone-prod-p01.wcfb.p1.openshiftapps.com:6443/"
          }
        ],
        "query": "https://api.stone-prd-rh01.pg1f.p1.openshiftapps.com:6443/ : https://api.stone-prd-rh01.pg1f.p1.openshiftapps.com:6443/,https://api.stone-stg-rh01.l2vh.p1.openshiftapps.com:6443/ : https://api.stone-stg-rh01.l2vh.p1.openshiftapps.com:6443/,https://api.stone-prod-p02.hjvn.p1.openshiftapps.com:6443/ : https://api.stone-prod-p02.hjvn.p1.openshiftapps.com:6443/,https://api.stone-stage-p01.hpmt.p1.openshiftapps.com:6443/ : https://api.stone-stage-p01.hpmt.p1.openshiftapps.com:6443/,https://api.kflux-prd-rh02.0fk9.p1.openshiftapps.com:6443/ : https://api.kflux-prd-rh02.0fk9.p1.openshiftapps.com:6443/,https://api.stone-prod-p01.wcfb.p1.openshiftapps.com:6443/ : https://api.stone-prod-p01.wcfb.p1.openshiftapps.com:6443/",
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "Off",
          "value": "Off"
        },
        "description": "Description",
        "label": "Smoothing",
        "name": "smoothing",
        "options": [
          {
            "selected": true,
            "text": "Off",
            "value": "Off"
          },
          {
            "selected": false,
            "text": "3 hours",
            "value": "3 hours"
          },
          {
            "selected": false,
            "text": "12 hours",
            "value": "12 hours"
          },
          {
            "selected": false,
            "text": "1 day",
            "value": "1 day"
          },
          {
            "selected": false,
            "text": "3 days",
            "value": "3 days"
          }
        ],
        "query": "Off : Off,3 hours : 3 hours,12 hours : 12 hours,1 day : 1 day,3 days : 3 days",
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timezone": "utc",
  "title": "Konflux clusters loadtest probe results",
  "uid": "Konflux_clusters_loadtest_probe_results"
}
